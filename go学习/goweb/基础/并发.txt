channel    通道 
总是保证了 先见先出的原则

1.创建通道
 通道都是引用类型  通道类型的控制是nil
 声明
var  变量  chan  元素类型
var  ch1 chan  int
var  ch2  chan  bool 

make   切片  map   chan

make(chan 元素类型 ,[缓冲大小])

chan 是引用类型  必须初始化才能使用


2 通道的操作
  1.发送 2.接收  3.关闭
  发送和接收都是用<- 符合

发送  
ch<-10

接收
x:=<-ch

关闭  通道的关闭不是必要的 
close(ch)


3. 例子 
	var ch1 chan  int
	ch1=make(chan int,1)
	ch1<-10
	x:=<-ch1
	fmt.Println(x)

4.类型
如果没有指定缓冲区的大小 叫无缓冲通道
ch1=make(chan int)

如果有指定缓冲区的大小 叫缓冲通道
ch1=make(chan int,5)

5. 俩个goroutine
  1.生成 0-100的数字发送到ch1
  2.从ch1中去除数据计算平方，把结果发送到ch2中
  

func f1(ch chan int){
	for i:=0;i<100;i++{
		ch<-i
	}
	close(ch)
}

func f2(ch1 chan int ,ch2 chan int)  {
	for  {
		tmp,ok:=<-ch1
		if !ok{
			break
		}
		ch2<-tmp*tmp
	}
	close(ch2)
}

func main(){ //开启一个主 goroutine 去执行main 函数
	 ch1:=make(chan int,100)
	 ch2:=make(chan int ,200)
	 go f1(ch1)
	 go f2(ch1,ch2)
	for ret:=range ch2{
		fmt.Println(ret)
	}

}



6  单线通道
只写通道
  var aa  chan<-  int
只读通道
  var bb  <-chan  int  






















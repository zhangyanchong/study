1.结构体

//结构体定义在函数外部

定义
 type  结构体名  struct{
     //结构体成员列表
     //成员名 数据类型
     name  string
     age   int
 }


// 大小写区分  大写别的文件才能调用
type stu struct{
     id int
     name string
     sex  string
     age int
     addr string
}

//顺序初始化 每次成员必须初始化
var s1 stu = stu {1,"张三","男",12,"塑料袋咖啡"}


2.自动推导
   stu:=stu{1,"张三","男",12,"塑料袋咖啡"}
   //指定成员赋值
   stu:=stu{name:"张三",id:3,sex:"男",age:12,addr:"SDK浪费"}
  

3.  第三种
 //var  变量名  结构体名
  var  s2  stu 
  fmt.Println(stu2)

  var  s2  stu
  //为结构体成员赋值
   s2.addr="撒打发"
   s2.id=100
   s2.age=123
   s2.name="撒打发"
   s2.sex="男"
  fmt.Println(s2)
  
fmt.Printf("%p\n",&s2)   //当前内存地址
  fmt.Printf("%p\n",&s2.id)

  结构体比较
  var s1 stu = stu {1,"张三","男",12,"塑料袋咖啡"}
  var s2 stu = stu {2,"张三1","男",12,"收代理费"}
  var s3 stu = stu {1,"张三","男",12,"塑料袋咖啡"}

  fmt.Println(s1==s2)  //false
  fmt.Println(s1==s3)  //true


4.结构体数组和切片

type stu struct{
   id int
   name string
}
//数组存储
  var  arr[3]stu=[3]stu{
    stu{1,"礼拜"},  stu{2,"hah"},stu{3,"杜甫"},
  }
  fmt.Println(arr) //[{1 礼拜} {2 hah} {3 杜甫}]

  arr[1].name="123"
  fmt.Println(arr)

//结构体数组做为函数参数  值传递

//结构体切片作为函数参数  地址传递

//结构体作为函数的时候   值传递

5.结构体和map
type hero struct{
    name string
    age int
    power int
}

//将结构体作为map的值 value
m:=make(map[int]hero)

//字典是无序  map的数据不建议排序操作
  m[101]=hero{"张三",12,100}
  m[100]=hero{"李四",11,80}

fmt.Println(m)


//结构体切片
m1:=make(map[int][]hero)
m1[101]=[]hero{{"张三",12,100},{"张三1",121,80},{"张三1",112,80}}



fmt.Println(m1)

//结构体切片 追加
  m1:=make(map[int][]hero)
  m1[101]=[]hero{{"张三",12,100},{"张三1",121,80},{"张三1",112,80}}
  m1[101] = append(m1[101],hero{"追加",23,90})


  fmt.Println(m1)

  m1[102]=[]hero{{"张三",12,100}}

  fmt.Println(m1)



 //将map 作为函数参数传递  地址传递  